package com.drownedinsound.data.generatered;

import java.util.List;
import com.drownedinsound.data.generatered.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.support.annotation.StringDef;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import com.drownedinsound.data.model.BoardListTypes;
// KEEP INCLUDES END
/**
 * Entity mapped to table "BOARD_POST_LIST".
 */
public class BoardPostList {

    /** Not-null value. */
    private String boardListTypeID;
    /** Not-null value. */
    private String displayName;
    /** Not-null value. */
    private String url;
    private long lastFetchedMs;
    private int sectionId;
    private int pageIndex;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BoardPostListDao myDao;

    private List<BoardPost> posts;

    // KEEP FIELDS - put your custom fields here
    @Retention(RetentionPolicy.SOURCE)
    @StringDef({BoardListTypes.MUSIC, BoardListTypes.SOCIAL,BoardListTypes.ANNOUNCEMENTS_CLASSIFIEDS,
            BoardListTypes.FESTIVALS,
            BoardListTypes.ERRORS_SUGGESTIONS,BoardListTypes.MUSICIANS,BoardListTypes.YOUR_MUSIC})
    public @interface BoardPostListType {

    }
    // KEEP FIELDS END

    public BoardPostList() {
    }

    public BoardPostList(String boardListTypeID) {
        this.boardListTypeID = boardListTypeID;
    }

    public BoardPostList(String boardListTypeID, String displayName, String url, long lastFetchedMs, int sectionId, int pageIndex) {
        this.boardListTypeID = boardListTypeID;
        this.displayName = displayName;
        this.url = url;
        this.lastFetchedMs = lastFetchedMs;
        this.sectionId = sectionId;
        this.pageIndex = pageIndex;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBoardPostListDao() : null;
    }

    /** Not-null value. */
    public String getBoardListTypeID() {
        return boardListTypeID;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBoardListTypeID(String boardListTypeID) {
        this.boardListTypeID = boardListTypeID;
    }

    /** Not-null value. */
    public String getDisplayName() {
        return displayName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    /** Not-null value. */
    public String getUrl() {
        return url;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUrl(String url) {
        this.url = url;
    }

    public long getLastFetchedMs() {
        return lastFetchedMs;
    }

    public void setLastFetchedMs(long lastFetchedMs) {
        this.lastFetchedMs = lastFetchedMs;
    }

    public int getSectionId() {
        return sectionId;
    }

    public void setSectionId(int sectionId) {
        this.sectionId = sectionId;
    }

    public int getPageIndex() {
        return pageIndex;
    }

    public void setPageIndex(int pageIndex) {
        this.pageIndex = pageIndex;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<BoardPost> getPosts() {
        if (posts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BoardPostDao targetDao = daoSession.getBoardPostDao();
            List<BoardPost> postsNew = targetDao._queryBoardPostList_Posts(boardListTypeID);
            synchronized (this) {
                if(posts == null) {
                    posts = postsNew;
                }
            }
        }
        return posts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPosts() {
        posts = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
