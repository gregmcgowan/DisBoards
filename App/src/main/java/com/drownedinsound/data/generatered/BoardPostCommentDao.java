package com.drownedinsound.data.generatered;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.drownedinsound.data.generatered.BoardPostComment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOARD_POST_COMMENT".
*/
public class BoardPostCommentDao extends AbstractDao<BoardPostComment, String> {

    public static final String TABLENAME = "BOARD_POST_COMMENT";

    /**
     * Properties of entity BoardPostComment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CommentID = new Property(0, String.class, "commentID", true, "COMMENT_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property AuthorUsername = new Property(3, String.class, "authorUsername", false, "AUTHOR_USERNAME");
        public final static Property ReplyToUsername = new Property(4, String.class, "replyToUsername", false, "REPLY_TO_USERNAME");
        public final static Property UsersWhoHaveThissed = new Property(5, String.class, "usersWhoHaveThissed", false, "USERS_WHO_HAVE_THISSED");
        public final static Property DateAndTime = new Property(6, String.class, "dateAndTime", false, "DATE_AND_TIME");
        public final static Property CommentLevel = new Property(7, Integer.class, "commentLevel", false, "COMMENT_LEVEL");
        public final static Property BoardPostID = new Property(8, String.class, "boardPostID", false, "BOARD_POST_ID");
    };

    private DaoSession daoSession;

    private Query<BoardPostComment> boardPost_UnorderedCommentsQuery;

    public BoardPostCommentDao(DaoConfig config) {
        super(config);
    }
    
    public BoardPostCommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOARD_POST_COMMENT\" (" + //
                "\"COMMENT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: commentID
                "\"TITLE\" TEXT," + // 1: title
                "\"CONTENT\" TEXT," + // 2: content
                "\"AUTHOR_USERNAME\" TEXT," + // 3: authorUsername
                "\"REPLY_TO_USERNAME\" TEXT," + // 4: replyToUsername
                "\"USERS_WHO_HAVE_THISSED\" TEXT," + // 5: usersWhoHaveThissed
                "\"DATE_AND_TIME\" TEXT," + // 6: dateAndTime
                "\"COMMENT_LEVEL\" INTEGER," + // 7: commentLevel
                "\"BOARD_POST_ID\" TEXT);"); // 8: boardPostID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOARD_POST_COMMENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BoardPostComment entity) {
        stmt.clearBindings();
 
        String commentID = entity.getCommentID();
        if (commentID != null) {
            stmt.bindString(1, commentID);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String authorUsername = entity.getAuthorUsername();
        if (authorUsername != null) {
            stmt.bindString(4, authorUsername);
        }
 
        String replyToUsername = entity.getReplyToUsername();
        if (replyToUsername != null) {
            stmt.bindString(5, replyToUsername);
        }
 
        String usersWhoHaveThissed = entity.getUsersWhoHaveThissed();
        if (usersWhoHaveThissed != null) {
            stmt.bindString(6, usersWhoHaveThissed);
        }
 
        String dateAndTime = entity.getDateAndTime();
        if (dateAndTime != null) {
            stmt.bindString(7, dateAndTime);
        }
 
        Integer commentLevel = entity.getCommentLevel();
        if (commentLevel != null) {
            stmt.bindLong(8, commentLevel);
        }
 
        String boardPostID = entity.getBoardPostID();
        if (boardPostID != null) {
            stmt.bindString(9, boardPostID);
        }
    }

    @Override
    protected void attachEntity(BoardPostComment entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BoardPostComment readEntity(Cursor cursor, int offset) {
        BoardPostComment entity = new BoardPostComment( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // commentID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // authorUsername
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // replyToUsername
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // usersWhoHaveThissed
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dateAndTime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // commentLevel
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // boardPostID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BoardPostComment entity, int offset) {
        entity.setCommentID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthorUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReplyToUsername(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUsersWhoHaveThissed(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDateAndTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCommentLevel(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setBoardPostID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BoardPostComment entity, long rowId) {
        return entity.getCommentID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BoardPostComment entity) {
        if(entity != null) {
            return entity.getCommentID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "unorderedComments" to-many relationship of BoardPost. */
    public List<BoardPostComment> _queryBoardPost_UnorderedComments(String boardPostID) {
        synchronized (this) {
            if (boardPost_UnorderedCommentsQuery == null) {
                QueryBuilder<BoardPostComment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BoardPostID.eq(null));
                boardPost_UnorderedCommentsQuery = queryBuilder.build();
            }
        }
        Query<BoardPostComment> query = boardPost_UnorderedCommentsQuery.forCurrentThread();
        query.setParameter(0, boardPostID);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBoardPostDao().getAllColumns());
            builder.append(" FROM BOARD_POST_COMMENT T");
            builder.append(" LEFT JOIN BOARD_POST T0 ON T.\"BOARD_POST_ID\"=T0.\"BOARD_POST_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BoardPostComment loadCurrentDeep(Cursor cursor, boolean lock) {
        BoardPostComment entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        BoardPost boardPost = loadCurrentOther(daoSession.getBoardPostDao(), cursor, offset);
        entity.setBoardPost(boardPost);

        return entity;    
    }

    public BoardPostComment loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BoardPostComment> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BoardPostComment> list = new ArrayList<BoardPostComment>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BoardPostComment> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BoardPostComment> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
