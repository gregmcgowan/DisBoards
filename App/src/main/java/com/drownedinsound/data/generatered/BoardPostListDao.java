package com.drownedinsound.data.generatered;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.drownedinsound.data.generatered.BoardPostList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOARD_POST_LIST".
*/
public class BoardPostListDao extends AbstractDao<BoardPostList, String> {

    public static final String TABLENAME = "BOARD_POST_LIST";

    /**
     * Properties of entity BoardPostList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BoardListTypeID = new Property(0, String.class, "boardListTypeID", true, "BOARD_LIST_TYPE_ID");
        public final static Property DisplayName = new Property(1, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property LastFetchedMs = new Property(3, long.class, "lastFetchedMs", false, "LAST_FETCHED_MS");
        public final static Property SectionId = new Property(4, int.class, "sectionId", false, "SECTION_ID");
        public final static Property PageIndex = new Property(5, int.class, "pageIndex", false, "PAGE_INDEX");
    };


    public BoardPostListDao(DaoConfig config) {
        super(config);
    }
    
    public BoardPostListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOARD_POST_LIST\" (" + //
                "\"BOARD_LIST_TYPE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: boardListTypeID
                "\"DISPLAY_NAME\" TEXT NOT NULL ," + // 1: displayName
                "\"URL\" TEXT NOT NULL ," + // 2: url
                "\"LAST_FETCHED_MS\" INTEGER NOT NULL ," + // 3: lastFetchedMs
                "\"SECTION_ID\" INTEGER NOT NULL ," + // 4: sectionId
                "\"PAGE_INDEX\" INTEGER NOT NULL );"); // 5: pageIndex
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOARD_POST_LIST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BoardPostList entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getBoardListTypeID());
        stmt.bindString(2, entity.getDisplayName());
        stmt.bindString(3, entity.getUrl());
        stmt.bindLong(4, entity.getLastFetchedMs());
        stmt.bindLong(5, entity.getSectionId());
        stmt.bindLong(6, entity.getPageIndex());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BoardPostList readEntity(Cursor cursor, int offset) {
        BoardPostList entity = new BoardPostList( //
            cursor.getString(offset + 0), // boardListTypeID
            cursor.getString(offset + 1), // displayName
            cursor.getString(offset + 2), // url
            cursor.getLong(offset + 3), // lastFetchedMs
            cursor.getInt(offset + 4), // sectionId
            cursor.getInt(offset + 5) // pageIndex
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BoardPostList entity, int offset) {
        entity.setBoardListTypeID(cursor.getString(offset + 0));
        entity.setDisplayName(cursor.getString(offset + 1));
        entity.setUrl(cursor.getString(offset + 2));
        entity.setLastFetchedMs(cursor.getLong(offset + 3));
        entity.setSectionId(cursor.getInt(offset + 4));
        entity.setPageIndex(cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BoardPostList entity, long rowId) {
        return entity.getBoardListTypeID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BoardPostList entity) {
        if(entity != null) {
            return entity.getBoardListTypeID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
