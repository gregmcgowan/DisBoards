package com.drownedinsound.data.generatered;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here

import android.text.format.DateUtils;

import java.util.Comparator;

// KEEP INCLUDES END

/**
 * Entity mapped to table "BOARD_POST_SUMMARY".
 */
public class BoardPostSummary {

    private String boardPostID;
    private String title;
    private String authorUsername;
    private Integer numberOfReplies;
    private boolean isSticky;
    private long lastUpdatedTime;
    private long lastViewedTime;
    /** Not-null value. */
    private String boardListTypeID;

    // KEEP FIELDS - put your custom fields here

    public static final BoardPostSummaryComparator COMPARATOR = new BoardPostSummaryComparator();

    // KEEP FIELDS END

    public BoardPostSummary() {
    }

    public BoardPostSummary(String boardPostID) {
        this.boardPostID = boardPostID;
    }

    public BoardPostSummary(String boardPostID, String title, String authorUsername, Integer numberOfReplies, boolean isSticky, long lastUpdatedTime, long lastViewedTime, String boardListTypeID) {
        this.boardPostID = boardPostID;
        this.title = title;
        this.authorUsername = authorUsername;
        this.numberOfReplies = numberOfReplies;
        this.isSticky = isSticky;
        this.lastUpdatedTime = lastUpdatedTime;
        this.lastViewedTime = lastViewedTime;
        this.boardListTypeID = boardListTypeID;
    }

    public String getBoardPostID() {
        return boardPostID;
    }

    public void setBoardPostID(String boardPostID) {
        this.boardPostID = boardPostID;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthorUsername() {
        return authorUsername;
    }

    public void setAuthorUsername(String authorUsername) {
        this.authorUsername = authorUsername;
    }

    public Integer getNumberOfReplies() {
        return numberOfReplies;
    }

    public void setNumberOfReplies(Integer numberOfReplies) {
        this.numberOfReplies = numberOfReplies;
    }

    public boolean getIsSticky() {
        return isSticky;
    }

    public void setIsSticky(boolean isSticky) {
        this.isSticky = isSticky;
    }

    public long getLastUpdatedTime() {
        return lastUpdatedTime;
    }

    public void setLastUpdatedTime(long lastUpdatedTime) {
        this.lastUpdatedTime = lastUpdatedTime;
    }

    public long getLastViewedTime() {
        return lastViewedTime;
    }

    public void setLastViewedTime(long lastViewedTime) {
        this.lastViewedTime = lastViewedTime;
    }

    /** Not-null value. */
    public String getBoardListTypeID() {
        return boardListTypeID;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBoardListTypeID(String boardListTypeID) {
        this.boardListTypeID = boardListTypeID;
    }

    // KEEP METHODS - put your custom methods here

    public String getLastUpdatedInReadableString() {
        StringBuilder lastUpdatedBuilder = new StringBuilder();
        if (lastUpdatedTime > 0) {
            CharSequence friendlyTime = DateUtils.getRelativeTimeSpanString(
                    lastUpdatedTime, System.currentTimeMillis(),
                    DateUtils.SECOND_IN_MILLIS, DateUtils.FORMAT_ABBREV_ALL);
            lastUpdatedBuilder.append(friendlyTime.toString());

        }
        return lastUpdatedBuilder.toString();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        BoardPostSummary that = (BoardPostSummary) o;

        return !(boardPostID != null ? !boardPostID.equals(that.boardPostID)
                : that.boardPostID != null);

    }

    public static class BoardPostSummaryComparator implements Comparator<BoardPostSummary> {

        @Override
        public int compare(BoardPostSummary leftHandSideBoardPost,
                BoardPostSummary rightHandSidePost) {
            if (leftHandSideBoardPost == null) {
                return 1;
            }
            if (rightHandSidePost == null) {
                return -1;
            }

            boolean lhsIsSticky = leftHandSideBoardPost.getIsSticky();
            boolean rhsIsSticky = rightHandSidePost.getIsSticky();

            if (!lhsIsSticky && rhsIsSticky) {
                return 1;
            }
            if (lhsIsSticky && !rhsIsSticky) {
                return -1;
            }

            long leftHandsideLastUpdatedTime = leftHandSideBoardPost
                    .getLastUpdatedTime();
            long rightHandsideLastUpdatedTime = rightHandSidePost
                    .getLastUpdatedTime();

            if (rightHandsideLastUpdatedTime > leftHandsideLastUpdatedTime) {
                return 1;
            }
            if (leftHandsideLastUpdatedTime > rightHandsideLastUpdatedTime) {
                return -1;
            }

            return 0;
        }
    }

    @Override
    public int hashCode() {
        return boardPostID != null ? boardPostID.hashCode() : 0;
    }
    // KEEP METHODS END

}
